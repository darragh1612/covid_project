cluster_data2016 <- read.csv("C:/Users/darra/OneDrive/Documents/datamining/countryhappiness_europe/cluster_data2016.csv", header = TRUE, row.names = 1, sep = ",")
#2017
vars <- c("Country", "Happiness_Score2017", "Annual_Gross2017")
cluster_data2017 <- hap_inc[vars]
write.csv(cluster_data2017,"C:/Users/darra/OneDrive/Documents/datamining/countryhappiness_europe/cluster_data2017.csv", row.names = FALSE)
cluster_data2017 <- read.csv("C:/Users/darra/OneDrive/Documents/datamining/countryhappiness_europe/cluster_data2017.csv", header = TRUE, row.names = 1, sep = ",")
model1 <- lm(Annual_Gross2015 ~ Happiness_Score2015, data=hap_inc)
model1 <- lm(Annual_Gross2015 ~ Happiness_Score2015, data=hap_inc)
summary(model1)
summary(hap_inc)
plot(hap_inc$Happiness_Score2015, hap_inc$Annual_Gross2015, ylim=c(100, 200), xlab="Happiness Score", ylab="Income", main="2015")
abline(mod2015, col="lightblue")
model1 <- lm(Annual_Gross2015 ~ Happiness_Score2015, data=hap_inc)
summary(hap_inc)
plot(hap_inc$Happiness_Score2015, hap_inc$Annual_Gross2015, ylim=c(100, 200), xlab="Happiness Score", ylab="Income", main="2015")
abline(model1, col="lightblue")
plot(hap_inc$Happiness_Score2015, hap_inc$Annual_Gross2015, xlab="Happiness Score", ylab="Income", main="2015")
abline(model1, col="lightblue")
summary(hap_inc$Happiness_Score2015)
newx <- seq(4.218, 7.587, by=0.05)
plot(hap_inc$Happiness_Score2015, hap_inc$Annual_Gross2015, xlab="Happiness Score", ylab="Income", main="2015")
abline(model1, col="lightblue")
conf_interval <- predict(model1, newdata=data.frame(Happiness_Score2015=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
model2015 <- lm(Annual_Gross2015 ~ Happiness_Score2015, data=hap_inc)
summary(model2015)
summary(hap_inc$Happiness_Score2015)
plot(hap_inc$Happiness_Score2015, hap_inc$Annual_Gross2015, xlab="Happiness Score", ylab="Income", main="2015")
abline(model2015, col="lightblue")
newx <- seq(4.218, 7.587, by=0.05)
plot(hap_inc$Happiness_Score2015, hap_inc$Annual_Gross2015, xlab="Happiness Score", ylab="Income", main="2015")
abline(model1, col="lightblue")
conf_interval <- predict(model2015, newdata=data.frame(Happiness_Score2015=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
summary(hap_inc$Happiness_Score2015)
plot(hap_inc$Happiness_Score2015, hap_inc$Annual_Gross2015, xlab="Happiness Score", ylab="Income", main="2015")
abline(model2015, col="lightblue")
newx <- seq(4.218, 7.587, by=0.05)
plot(hap_inc$Happiness_Score2015, hap_inc$Annual_Gross2015, xlab="Happiness Score", ylab="Income", main="2015")
abline(model1, col="lightblue")
conf_interval <- predict(model2015, newdata=data.frame(Happiness_Score2015=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
summary(hap_inc$Happiness_Score2015)
plot(hap_inc$Happiness_Score2015, hap_inc$Annual_Gross2015, xlab="Happiness Score", ylab="Average Annual Gross Income", main="2015")
abline(model2015, col="lightblue")
newx <- seq(4.218, 7.587, by=0.05)
plot(hap_inc$Happiness_Score2015, hap_inc$Annual_Gross2015, xlab="Happiness Score", ylab="Income", main="2015")
abline(model1, col="lightblue")
conf_interval <- predict(model2015, newdata=data.frame(Happiness_Score2015=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
summary(hap_inc$Happiness_Score2016)
summary(hap_inc$Happiness_Score2015)
plot(hap_inc$Happiness_Score2015, hap_inc$Annual_Gross2015, xlab="Happiness Score", ylab="Average Annual Gross Income", main="2015")
abline(model2015, col="lightblue")
newx <- seq(4.218, 7.587, by=0.05)
plot(hap_inc$Happiness_Score2015, hap_inc$Annual_Gross2015, xlab="Happiness Score", ylab="Income", main="2015")
abline(model2015, col="lightblue")
conf_interval <- predict(model2015, newdata=data.frame(Happiness_Score2015=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
summary(hap_inc$Happiness_Score2015)
newx <- seq(4.218, 7.587, by=0.05)
plot(hap_inc$Happiness_Score2015, hap_inc$Annual_Gross2015, xlab="Happiness Score", ylab="Income", main="2015")
abline(model2015, col="lightblue")
conf_interval <- predict(model2015, newdata=data.frame(Happiness_Score2015=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
summary(hap_inc$Happiness_Score2016)
summary(hap_inc$Happiness_Score2016)
newx <- seq(4.217, 7.526, by=0.05)
plot(hap_inc$Happiness_Score2016, hap_inc$Annual_Gross2016, xlab="Happiness Score", ylab="Income", main="2016")
abline(model1, col="pink")
conf_interval <- predict(model2016, newdata=data.frame(Happiness_Score2016=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
summary(hap_inc$Happiness_Score2017)
model2015 <- lm(Annual_Gross2015 ~ Happiness_Score2015, data=hap_inc)
model2016 <- lm(Annual_Gross2016 ~ Happiness_Score2016, data=hap_inc)
model2017 <- lm(Annual_Gross2017 ~ Happiness_Score2017, data=hap_inc)
summary(hap_inc$Happiness_Score2015)
newx <- seq(4.218, 7.587, by=0.05)
plot(hap_inc$Happiness_Score2015, hap_inc$Annual_Gross2015, xlab="Happiness Score", ylab="Income", main="2015")
abline(model2015, col="lightblue")
conf_interval <- predict(model2015, newdata=data.frame(Happiness_Score2015=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
summary(hap_inc$Happiness_Score2016)
newx <- seq(4.217, 7.526, by=0.05)
plot(hap_inc$Happiness_Score2016, hap_inc$Annual_Gross2016, xlab="Happiness Score", ylab="Income", main="2016")
abline(model1, col="pink")
conf_interval <- predict(model2016, newdata=data.frame(Happiness_Score2016=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
summary(hap_inc$Happiness_Score2017)
newx <- seq(4.096, 7.537, by=0.05)
plot(hap_inc$Happiness_Score2017, hap_inc$Annual_Gross2017, xlab="Happiness Score", ylab="Income", main="2017")
abline(model1, col="yellow")
conf_interval <- predict(model2017, newdata=data.frame(Happiness_Score2017=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
summary(hap_inc$Happiness_Score2015)
newx <- seq(4.218, 7.587, by=0.05)
plot(hap_inc$Happiness_Score2015, hap_inc$Annual_Gross2015, xlab="Happiness Score", ylab="Income", main="2015")
abline(model2015, col="lightblue", lwd = 2.5)
conf_interval <- predict(model2015, newdata=data.frame(Happiness_Score2015=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
regression_3years <- data.frame(
score = c(hap_inc$Happiness_Score2015,hap_inc$Happiness_Score2016,hap_inc$Happiness_Score2017),
income = c(hap_inc$Annual_Gross2015, hap_inc$Annual_Gross2016, hap_inc$Annual_Gross2017)
)
plot(regression_3years$score, regression_3years$income, main="All Time - Regression",
xlab = "Happiness Score", ylab = "Income"
) + abline(mod2015, col=5, lwd=2) + abline(mod2016, col=6, lwd=2) + abline(mod2017, col=7, lwd=2)
regression_3years <- data.frame(
score = c(hap_inc$Happiness_Score2015,hap_inc$Happiness_Score2016,hap_inc$Happiness_Score2017),
income = c(hap_inc$Annual_Gross2015, hap_inc$Annual_Gross2016, hap_inc$Annual_Gross2017)
)
#scatterplot with lines produced from linear modelling - shows all 3 years of data
plot(regression_3years$score, regression_3years$income, main="All Time - Regression",
xlab = "Happiness Score", ylab = "Income"
) + abline(model2015, col=5, lwd=2) + abline(model2016, col=6, lwd=2) + abline(model2017, col=7, lwd=2)
model2015 <- lm(Annual_Gross2015 ~ Happiness_Score2015, data=hap_inc)
model2016 <- lm(Annual_Gross2016 ~ Happiness_Score2016, data=hap_inc)
model2017 <- lm(Annual_Gross2017 ~ Happiness_Score2017, data=hap_inc)
summary(hap_inc$Happiness_Score2016)
newx <- seq(4.217, 7.526, by=0.05)
plot(hap_inc$Happiness_Score2016, hap_inc$Annual_Gross2016, xlab="Happiness Score", ylab="Income", main="2016")
abline(model1, col="pink", lwd = 2.5)
conf_interval <- predict(model2016, newdata=data.frame(Happiness_Score2016=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
summary(hap_inc$Happiness_Score2017)
newx <- seq(4.096, 7.537, by=0.05)
plot(hap_inc$Happiness_Score2017, hap_inc$Annual_Gross2017, xlab="Happiness Score", ylab="Income", main="2017")
abline(model1, col="yellow", lwd = 2.5)
conf_interval <- predict(model2017, newdata=data.frame(Happiness_Score2017=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
summary(hap_inc$Happiness_Score2015)
newx <- seq(4.218, 7.587, by=0.05)
plot(hap_inc$Happiness_Score2015, hap_inc$Annual_Gross2015, xlab="Happiness Score", ylab="Income", main="2015")
abline(model2015, col="lightblue", lwd = 2.5)
conf_interval <- predict(model2015, newdata=data.frame(Happiness_Score2015=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
pred_interval <- predict(model2015, newdata=data.frame(Happiness_Score2015=newx), interval="prediction",
level = 0.95)
lines(newx, pred_interval[,2], col="orange", lty=2)
lines(newx, pred_interval[,3], col="orange", lty=2)
summary(hap_inc$Happiness_Score2015)
newx <- seq(4.218, 7.587, by=0.05)
plot(hap_inc$Happiness_Score2015, hap_inc$Annual_Gross2015, xlab="Happiness Score", ylab="Income", main="2015")
abline(model2015, col="lightblue", lwd = 2.5)
conf_interval <- predict(model2015, newdata=data.frame(Happiness_Score2015=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
pred_interval <- predict(model2015, newdata=data.frame(Happiness_Score2015=newx), interval="prediction",
level = 0.95)
lines(newx, pred_interval[,2], col="orange", lty=2)
lines(newx, pred_interval[,3], col="orange", lty=2)
#2015
summary(hap_inc$Happiness_Score2015)
newx <- seq(4.218, 7.587, by=0.05)
plot(hap_inc$Happiness_Score2015, hap_inc$Annual_Gross2015, xlab="Happiness Score", ylab="Income", main="2015")
abline(model2015, col="lightblue", lwd = 2.5)
conf_interval <- predict(model2015, newdata=data.frame(Happiness_Score2015=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
pred_interval <- predict(model2015, newdata=data.frame(Happiness_Score2015=newx), interval="prediction",
level = 0.95)
lines(newx, pred_interval[,2], col="orange", lty=2)
lines(newx, pred_interval[,3], col="orange", lty=2)
summary(hap_inc$Happiness_Score2016)
newx <- seq(4.217, 7.526, by=0.05)
plot(hap_inc$Happiness_Score2016, hap_inc$Annual_Gross2016, xlab="Happiness Score", ylab="Income", main="2016")
abline(model1, col="pink", lwd = 2.5)
conf_interval <- predict(model2016, newdata=data.frame(Happiness_Score2016=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
pred_interval <- predict(model2016, newdata=data.frame(Happiness_Score2016=newx), interval="prediction",
level = 0.95)
lines(newx, pred_interval[,2], col="orange", lty=2)
lines(newx, pred_interval[,3], col="orange", lty=2)
summary(hap_inc$Happiness_Score2017)
newx <- seq(4.096, 7.537, by=0.05)
plot(hap_inc$Happiness_Score2017, hap_inc$Annual_Gross2017, xlab="Happiness Score", ylab="Income", main="2017")
abline(model1, col="yellow", lwd = 2.5)
conf_interval <- predict(model2017, newdata=data.frame(Happiness_Score2017=newx), interval="confidence",
level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
pred_interval <- predict(model2017, newdata=data.frame(Happiness_Score2017=newx), interval="prediction",
level = 0.95)
lines(newx, pred_interval[,2], col="orange", lty=2)
lines(newx, pred_interval[,3], col="orange", lty=2)
setwd("C:/Users/darra/OneDrive/Documents/ABDA TABA")
data <- read.csv("WA_Fn-UseC_-HR-Employee-Attrition.csv", header = TRUE, sep = ",")
library(ggplot2)
library(plotly)
library(readr)
library(factoextra)
library(cluster)
library(gridExtra)
#Set Working Directory & Import CSV Files
setwd("D:/Software Project")
ND2020 <- read.csv("ND2020.csv", header = TRUE, sep = ",")
OH2020 <- read.csv("OH2020.csv", header = TRUE, sep = ",")
FL2020 <- read.csv("FL2020.csv", header = TRUE, sep = ",")
INall  <- read.csv("United_States_COVID-19_Cases_and_Deaths_by_State_over_Time - Copy.csv", header = TRUE, sep = ",")
fulldf <- read.csv("United_States_COVID-19_Cases_and_Deaths_by_State_over_Time.csv", header = TRUE, sep = ",")
map_avg_temp <- read.csv("average_temperature_map.csv", header = TRUE, sep = ",")
total_cases_temp <- read.csv("total_cases_temp.csv", header = TRUE, row.names = 1, sep = ",")
total_deaths_temp <- read.csv("total_deaths_temp.csv", header = TRUE, row.names = 1, sep = ",")
july_cases_temp <- read.csv("july_cases_temp.csv", header = TRUE, row.names = 3, sep = ",")
july_deaths_temp <- read.csv("july_deaths_temp.csv", header = TRUE, row.names = 3, sep = ",")
november_deaths_temp <- read.csv("november_deaths_temp.csv", header = TRUE, row.names = 3, sep = ",")
november_cases_temp <- read.csv("november_cases_temp.csv", header = TRUE, row.names = 3, sep = ",")
december_deaths_temp <- read.csv("december_deaths_temp.csv", header = TRUE, row.names = 3, sep = ",")
december_cases_temp <- read.csv("december_cases_temp.csv", header = TRUE, row.names = 3, sep = ",")
cases_map = plot_geo(map_avg_temp,
locationmode = 'USA-states',
frame = ~ month_id) %>%
add_markers(
y = ~lat, x = ~lon, locations = ~state_abbreviation,
size = ~cases, marker = list(sizeref = 1, color = 'white', sizemode = 'diameter')) %>%
add_trace (locations = ~state_abbreviation,
text = paste0('State: ', map_avg_temp$state, '<br>Temperature: ', map_avg_temp$average_temperature,'°F', '<br>Cases: ', map_avg_temp$cases),
hoverinfo = 'text',
z = ~average_temperature,
zmin = 0,
zmax = max(map_avg_temp$average_temperature),
color = ~average_temperature) %>%
layout(geo = list(scope = 'usa'),
title = "USA Covid 19 Cases By State 2020") %>%
config(displayModeBar = FALSE) %>%
colorbar(ticksuffix = "°F")
cases_map
deaths_map = plot_geo(map_avg_temp,
locationmode = 'USA-states',
frame = ~ month_id) %>%
add_markers(
y = ~lat, x = ~lon, locations = ~state_abbreviation,
size = ~deaths, marker = list(sizeref = 1, color = 'red', sizemode = 'diameter')) %>%
add_trace (locations = ~state_abbreviation,
text = paste0('State: ', map_avg_temp$state, '<br>Temperature: ', map_avg_temp$average_temperature,'°F', '<br>Deaths: ', map_avg_temp$deaths),
hoverinfo = 'text',
z = ~average_temperature,
zmin = 0,
zmax = max(map_avg_temp$average_temperature),
color = ~average_temperature) %>%
layout(geo = list(scope = 'usa'),
title = "USA Covid 19 Deaths By State 2020") %>%
config(displayModeBar = FALSE) %>%
colorbar(ticksuffix = "°F")
deaths_map
k2 <- kmeans(total_cases_temp, centers = 2, nstart = 25)
fviz_cluster(k2, data = total_cases_temp)
k3 <- kmeans(total_cases_temp, centers = 3, nstart = 25)
k4 <- kmeans(total_cases_temp, centers = 4, nstart = 25)
k5 <- kmeans(total_cases_temp, centers = 5, nstart = 25)
p1 <- fviz_cluster(k2, geom = "point", data = total_cases_temp) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point", data = total_cases_temp) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point", data = total_cases_temp) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point", data = total_cases_temp) + ggtitle("k = 5")
grid.arrange(p1, p2, p3, p4, nrow = 2)
wssplot <- function(data, max_clusters=15) {
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (k in 2:max_clusters){
wss[k] <- sum(kmeans(data, centers=k)$withinss)
}
plot(1:max_clusters, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
}
set.seed(42)
wssplot(total_cases_temp,10)
#Best number of centers
k2 <- kmeans(total_cases_temp, centers = 3, nstart = 25)
fviz_cluster(k2, data = total_cases_temp, main = "Cluster Plot Cases VS Average Temperature")
total_cases_temp
k2 <- kmeans(total_deaths_temp, centers = 2, nstart = 25)
fviz_cluster(k2, data = total_deaths_temp)
k3 <- kmeans(total_deaths_temp, centers = 3, nstart = 25)
k4 <- kmeans(total_deaths_temp, centers = 4, nstart = 25)
k5 <- kmeans(total_deaths_temp, centers = 5, nstart = 25)
p1 <- fviz_cluster(k2, geom = "point", data = total_deaths_temp) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point", data = total_deaths_temp) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point", data = total_deaths_temp) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point", data = total_deaths_temp) + ggtitle("k = 5")
grid.arrange(p1, p2, p3, p4, nrow = 2)
wssplot <- function(data, max_clusters=15) {
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (k in 2:max_clusters){
wss[k] <- sum(kmeans(data, centers=k)$withinss)
}
plot(1:max_clusters, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
}
set.seed(42)
wssplot(total_deaths_temp,10)
#Best number of centers
k2 <- kmeans(total_deaths_temp, centers = 3, nstart = 25)
fviz_cluster(k2, data = total_deaths_temp, main = "Cluster Plot Deaths VS Average Temperature")
k2 <- kmeans(july_cases_temp, centers = 2, nstart = 25)
fviz_cluster(k2, data = july_cases_temp)
k3 <- kmeans(july_cases_temp, centers = 3, nstart = 25)
k4 <- kmeans(july_cases_temp, centers = 4, nstart = 25)
k5 <- kmeans(july_cases_temp, centers = 5, nstart = 25)
p1 <- fviz_cluster(k2, geom = "point", data = july_cases_temp) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point", data = july_cases_temp) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point", data = july_cases_temp) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point", data = july_cases_temp) + ggtitle("k = 5")
grid.arrange(p1, p2, p3, p4, nrow = 2)
wssplot <- function(data, max_clusters=15) {
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (k in 2:max_clusters){
wss[k] <- sum(kmeans(data, centers=k)$withinss)
}
plot(1:max_clusters, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
}
set.seed(42)
wssplot(july_cases_temp,10)
#Best number of centers
k2 <- kmeans(july_cases_temp, centers = 3, nstart = 25)
fviz_cluster(k2, data = july_cases_temp, main = "Cluster Plot July Cases VS Temperature")
k2 <- kmeans(july_deaths_temp, centers = 2, nstart = 25)
fviz_cluster(k2, data = july_deaths_temp)
k3 <- kmeans(july_deaths_temp, centers = 3, nstart = 25)
k4 <- kmeans(july_deaths_temp, centers = 4, nstart = 25)
k5 <- kmeans(july_deaths_temp, centers = 5, nstart = 25)
p1 <- fviz_cluster(k2, geom = "point", data = july_deaths_temp) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point", data = july_deaths_temp) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point", data = july_deaths_temp) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point", data = july_deaths_temp) + ggtitle("k = 5")
grid.arrange(p1, p2, p3, p4, nrow = 2)
wssplot <- function(data, max_clusters=15) {
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (k in 2:max_clusters){
wss[k] <- sum(kmeans(data, centers=k)$withinss)
}
plot(1:max_clusters, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
}
set.seed(42)
wssplot(july_deaths_temp,10)
#Best number of centers
k2 <- kmeans(july_deaths_temp, centers = 3, nstart = 25)
fviz_cluster(k2, data = july_deaths_temp, main = "Cluster Plot July Deaths VS Temperature")
k2 <- kmeans(november_cases_temp, centers = 2, nstart = 25)
fviz_cluster(k2, data = november_cases_temp)
k3 <- kmeans(november_cases_temp, centers = 3, nstart = 25)
k4 <- kmeans(november_cases_temp, centers = 4, nstart = 25)
k5 <- kmeans(november_cases_temp, centers = 5, nstart = 25)
p1 <- fviz_cluster(k2, geom = "point", data = november_cases_temp) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point", data = november_cases_temp) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point", data = november_cases_temp) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point", data = november_cases_temp) + ggtitle("k = 5")
grid.arrange(p1, p2, p3, p4, nrow = 2)
wssplot <- function(data, max_clusters=15) {
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (k in 2:max_clusters){
wss[k] <- sum(kmeans(data, centers=k)$withinss)
}
plot(1:max_clusters, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
}
set.seed(42)
wssplot(november_cases_temp,10)
#Best number of centers
k2 <- kmeans(november_cases_temp, centers = 3, nstart = 25)
fviz_cluster(k2, data = november_cases_temp, main = "Cluster Plot November Cases VS Temperature")
k2 <- kmeans(november_deaths_temp, centers = 2, nstart = 25)
fviz_cluster(k2, data = november_deaths_temp)
k3 <- kmeans(november_deaths_temp, centers = 3, nstart = 25)
k4 <- kmeans(november_deaths_temp, centers = 4, nstart = 25)
k5 <- kmeans(november_deaths_temp, centers = 5, nstart = 25)
p1 <- fviz_cluster(k2, geom = "point", data = november_deaths_temp) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point", data = november_deaths_temp) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point", data = november_deaths_temp) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point", data = november_deaths_temp) + ggtitle("k = 5")
grid.arrange(p1, p2, p3, p4, nrow = 2)
wssplot <- function(data, max_clusters=15) {
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (k in 2:max_clusters){
wss[k] <- sum(kmeans(data, centers=k)$withinss)
}
plot(1:max_clusters, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
}
set.seed(42)
wssplot(november_deaths_temp,10)
#Best number of centers
k2 <- kmeans(november_deaths_temp, centers = 3, nstart = 25)
fviz_cluster(k2, data = november_deaths_temp, main = "Cluster Plot November Deaths VS Temperature")
#kmeans clustering December cases
k2 <- kmeans(december_cases_temp, centers = 2, nstart = 25)
fviz_cluster(k2, data = december_cases_temp)
k3 <- kmeans(december_cases_temp, centers = 3, nstart = 25)
k4 <- kmeans(december_cases_temp, centers = 4, nstart = 25)
k5 <- kmeans(december_cases_temp, centers = 5, nstart = 25)
p1 <- fviz_cluster(k2, geom = "point", data = december_cases_temp) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point", data = december_cases_temp) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point", data = december_cases_temp) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point", data = december_cases_temp) + ggtitle("k = 5")
grid.arrange(p1, p2, p3, p4, nrow = 2)
wssplot <- function(data, max_clusters=15) {
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (k in 2:max_clusters){
wss[k] <- sum(kmeans(data, centers=k)$withinss)
}
plot(1:max_clusters, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
}
set.seed(42)
wssplot(december_cases_temp,10)
#Best number of centers
k2 <- kmeans(december_cases_temp, centers = 3, nstart = 25)
fviz_cluster(k2, data = december_cases_temp, main = "Cluster Plot December Cases VS Temperature")
k2 <- kmeans(december_deaths_temp, centers = 2, nstart = 25)
fviz_cluster(k2, data = december_deaths_temp)
k3 <- kmeans(december_deaths_temp, centers = 3, nstart = 25)
k4 <- kmeans(december_deaths_temp, centers = 4, nstart = 25)
k5 <- kmeans(december_deaths_temp, centers = 5, nstart = 25)
p1 <- fviz_cluster(k2, geom = "point", data = december_deaths_temp) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point", data = december_deaths_temp) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point", data = december_deaths_temp) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point", data = december_deaths_temp) + ggtitle("k = 5")
grid.arrange(p1, p2, p3, p4, nrow = 2)
wssplot <- function(data, max_clusters=15) {
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (k in 2:max_clusters){
wss[k] <- sum(kmeans(data, centers=k)$withinss)
}
plot(1:max_clusters, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
}
set.seed(42)
wssplot(december_deaths_temp,10)
#Best number of centers
k2 <- kmeans(december_deaths_temp, centers = 3, nstart = 25)
fviz_cluster(k2, data = december_deaths_temp, main = "Cluster Plot December Deaths VS Temperature")
#Cases
ordertct <- total_cases_temp [order(total_cases_temp$avg_temp),]
modelcases <- lm(tot_cases ~ avg_temp, data = ordertct)
summary(ordertct$avg_temp)
newx <- seq(39.5, 70.0, by=0.05)
plot(ordertct$avg_temp, ordertct$tot_cases, xlab="Average Temperature", ylab="Cases", main="Average Temperature vs Total Cases")
abline(modelcases, col="lightblue", lwd = 2.5)
conf_interval <- predict(modelcases, newdata=data.frame(avg_temp=newx), interval="confidence", level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
pred_interval <- predict(modelcases, newdata=data.frame(avg_temp=newx), interval="prediction", level = 0.95)
lines(newx, pred_interval[,2], col="orange", lty=2)
lines(newx, pred_interval[,3], col="orange", lty=2)
summary(modelcases)
ordertct <- total_cases_temp [order(total_cases_temp$avg_temp),]
modelcases <- lm(tot_cases ~ avg_temp, data = ordertct)
summary(ordertct$avg_temp)
newx <- seq(39.5, 70.0, by=0.05)
plot(ordertct$avg_temp, ordertct$tot_cases, xlab="Average Temperature", ylab="Cases", main="Average Temperature & Total Cases")
abline(modelcases, col="lightblue", lwd = 2.5)
conf_interval <- predict(modelcases, newdata=data.frame(avg_temp=newx), interval="confidence", level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
pred_interval <- predict(modelcases, newdata=data.frame(avg_temp=newx), interval="prediction", level = 0.95)
lines(newx, pred_interval[,2], col="orange", lty=2)
lines(newx, pred_interval[,3], col="orange", lty=2)
ordertdt <- total_deaths_temp [order(total_deaths_temp$avg_temp),]
modeldeaths <- lm(tot_deaths ~ avg_temp, data = ordertdt)
summary(ordertdt$avg_temp)
newx <- seq(39.5, 70.0, by=0.05)
plot(ordertdt$avg_temp, ordertdt$tot_deaths, xlab="Average Temperature", ylab="Deaths", main="Average Temperature & Total Deaths")
abline(modeldeaths, col="lightblue", lwd = 2.5)
conf_interval <- predict(modeldeaths, newdata=data.frame(avg_temp=newx), interval="confidence", level = 0.95)
lines(newx, conf_interval[,2], col="blue", lty=2)
lines(newx, conf_interval[,3], col="blue", lty=2)
pred_interval <- predict(modeldeaths, newdata=data.frame(avg_temp=newx), interval="prediction", level = 0.95)
lines(newx, pred_interval[,2], col="orange", lty=2)
lines(newx, pred_interval[,3], col="orange", lty=2)
summary(modeldeaths)
View(fulldf)
normailytestcases <- fulldf$new_case[1:5000]
shapiro.test(normailytest)  #Reject the null, data is not normally distributed
normailtytestcases <- fulldf$new_case[1:5000]
shapiro.test(normailtytestcases)
normailitytestdeaths <- fulldf$new_death[1:5000]
shapiro.test(normailitytestdeaths)
plot(modelcases)
plot(modelcases)
plot(modeldeaths)
setwd("D:/Software Project/RStudiofiles")
setwd("D:/Software Project/RStudiofiles")
fulldf <- read.csv("United_States_COVID-19_Cases_and_Deaths_by_State_over_Time.csv", header = TRUE, sep = ",")
View(fulldf)
fulldf <- fulldf[ , -c(4,5,7,9,10,12,13,14,15)]
fulldf <- fulldf[order(state),]
fulldf <- fulldf[order(fulldf$state),]
fulldf[!grepl("DC", fulldf$state),]
